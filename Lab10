#define _CRT_SECURE_NO_WARNINGS
#include <malloc.h>
#include <stdlib.h>
#include <stdio.h>
#include <time.h>

void fill(int n, int k, int *a)
{
    int i, j;
    for (i = 0; i < n; i++)
        for(j = 0; j<k; j++)
            a[i * k + j] = i * k + j ;
    
}

void fail()
{
    printf("Memory allocation failure!\n");
    exit(EXIT_FAILURE);
}


int sled(int n, int k, int *a)
{
    int i, j, sled = 0;
    for (i = 0; i < n; i++)
        for(j = 0; j<k; j++)
        if (i == j){
             sled += a[i * k + j] + a[i * k + j+1] + a[i * k + j+2];
        }
        
    return sled;
}

// void transponse(int n, int k, int *a){
//     int i, j;
//     for (i = 0; i < n; i++)
//         for(j = 0; j<k; j++)
//         if (i != j){
//             a[i * k + j]=a[j * n + i];
//         }
// }

void zero(int n, int k, int *a){
    int i, j;
    for (i = 0; i < n; i++)
        for(j = 0; j<k; j++)
        if ((i != j) && (i != j-1) && (i != j-2)){
            a[i * k + j]=0;
        }
        
    
}

int main()
{
    int A, B, sld, num;
    srand(time(NULL));
    // int A, B, sld, num;
    printf("Создание матрицы \n");
    printf("Введите количество строк и столбцов. А * B ->  \n");
    scanf("%d", &A);
    scanf("%d", &B);
    int *a = (int*)malloc(A * B * sizeof(int));
    //B = A;
    // a = (int*)malloc(A*B * sizeof(int));
    // int a[A][B];
    fill(A, B, a);
    sld = sled(A, B, a);
    if (!a)
        fail();
    int i, j;
    for (i = 0; i < A; i++){
        for(j = 0; j<B; j++){
            printf("%4d", a[i * B + j]);
        }
        printf("\n");
    }
    printf("сумма элементов главной диагонали и двух соседних = %d \n", sld);
    printf("Введите число -> ");
    scanf("%d", &num);
    // printf("сумма элементов главной диагонали и двух соседних = %d \n", sld);
    if (num<sld){
        for (i = 0; i < B; i++){
            for(j = 0; j<A; j++){
                // if (i != j){
                printf("%4d", a[i + j*B]);
            }
            printf("\n");
        }
    }
    else{
        zero(A, B, a);
        for (i = 0; i < A; i++){
            for(j = 0; j<B; j++){
                printf("%4d", a[i * B + j]);
        }
        printf("\n");
    }
    }
    free(a);
    return 0;
}
